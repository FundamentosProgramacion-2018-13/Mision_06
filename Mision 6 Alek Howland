#encoding: UTF-8
#Autor: Alek Howland, A01747765
#Descripción: Uso de ciclo for para dibujar en pygame


import pygame   # Librería de pygame
import math
import random

# Dimensiones de la pantalla
ANCHO = 800
ALTO = 523
# Colores
BLANCO = (255, 255, 255)  # R,G,B en el rango [0,255], 0 ausencia de color, 255 toda la intensidad
VERDE_BANDERA = (27, 94, 32)    # un poco de rojo, más de verde, un poco de azul
ROJO = (255, 0, 0)      # solo rojo, nada de verde, nada de azul
COLOR1 = (240,228,176)
COLOR2 = (238,217,217)
COLOR3 = (238,191,191)
COLOR4 = (238,217,217)
AZUL = (0, 0, 255)      # nada de rojo, ni verde, solo azul
NEGRO = (0,0,0)


def colorRandom():
    c = random.randint(0,255), random.randint(0,255), random.randint(0,255)

    return c


# Estructura básica de un programa que usa pygame para dibujar
def dibujar(r, R, l):
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variable termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True      # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras
        # Normalmente llamas a otra función y le pasas -ventana- como parámetro, por ejemplo, dibujarLineas(ventana)
        # Consulta https://www.pygame.org/docs/ref/draw.html para ver lo que puede hacer draw


        vueltas = r//math.gcd(r, R)
        for angulo in range(0, (360*vueltas), 1):
            a = math.radians(angulo)
            x = int(R*(((1-(r/R))*math.cos(a))+((l*(r/R))*math.cos((((1-(r/R))/((r/R)))*a)))))
            y = int(R*(((1-(r/R))*math.sin(a))-((l*(r/R))*math.sin((((1-(r/R))/((r/R)))*a)))))
            pygame.draw.circle(ventana, COLOR1, ((x+ANCHO//2), (ALTO//2-y)), 1)
            pygame.draw.circle(ventana, COLOR4, ((x // 2 + x + ANCHO // 2), (ALTO // 2 - y // 2 + y)), 1)
            pygame.draw.circle(ventana, COLOR2, ((x // 2 + ANCHO // 2), (ALTO // 2 - y // 2)), 1)
            pygame.draw.circle(ventana, COLOR3, ((x // 4 + ANCHO // 2), (ALTO // 2 - y // 4)), 1)




        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(10)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


# Función principal, aquí resuelves el problema
def main():
    print("******************")
    print("Valores para figura: r: 70,  R: 220,  l: 1.2")
    print("******************")
    r = int(input("Valor de r: "))
    R = int(input("Valor de R: "))
    l = float(input("Valor de l: "))
    dibujar(r, R, l)


# Llamas a la función principal
main()
